plugins {
	id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.25"
	id 'idea'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id 'jacoco'
	id 'java'
	id 'org.springframework.boot' version '2.7.5'
}

group = 'bdd.demo.'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

def versions = [
		cucumber: '7.8.1',
		openapi: '1.6.12',
		jjwt: '0.9.1'
]

// jacoco exclusions
// Provide the list of classes to be excluded for jacoco verification
// Use ant glob pattern to exclude classes
def jacocoExclusions = [
		'bdd/demo/appjava/DemoApplication.class'	                 // ignore the main application
		,'bdd/demo/appjava/configuration/OpenApiConfig.class'	 	 // ignore api specification generation class
		,'bdd/**/Constants.class'	                                 // ignore all the constant files
		,'bdd/demo/appjava/user/AuthController.class'				 // Temp exclude
		,'bdd/demo/appjava/utils/JwtUtils.class'					 // Temp exclude
]
def excludeFromJacocoTestReport = false	                     // set this to true to exclude the classes from code coverage report also

repositories {
	mavenCentral()
}

sourceSets {
	testInt {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

idea {
	module {
		testSourceDirs += project.sourceSets.testInt.java.srcDirs
		testSourceDirs += project.sourceSets.testInt.resources.srcDirs
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	// Need this to start @SpringBootTest
	testIntImplementation {
		extendsFrom implementation
	}

	// Need this to start @SpringBootTest
	testIntRuntimeOnly {
		extendsFrom runtimeOnly
	}
}

dependencies {
	// Annotation, CompileOnly and Development only dependencies
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Main application dependencies
	implementation "io.jsonwebtoken:jjwt:${versions.jjwt}"
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation "org.springdoc:springdoc-openapi-ui:${versions.openapi}"

	// Runtime only dependencies
	runtimeOnly 'com.h2database:h2'

	// Unit test dependencies
	testAnnotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	// Integration test dependencies
	testIntAnnotationProcessor 'org.projectlombok:lombok'
	testIntCompileOnly 'org.projectlombok:lombok'
	testIntImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Cucumber dependencies
	testIntImplementation platform("io.cucumber:cucumber-bom:${versions.cucumber}")
	testIntImplementation "io.cucumber:cucumber-java"
	testIntImplementation "io.cucumber:cucumber-junit-platform-engine"
	testIntImplementation "io.cucumber:cucumber-spring"
}
task testInt(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	// Always run integration test
	outputs.upToDateWhen { false }
	testClassesDirs = sourceSets.testInt.output.classesDirs
	classpath = sourceSets.testInt.runtimeClasspath
	// Run integration test after running the unit tests
	shouldRunAfter test
}

tasks.withType(Test) {
	useJUnitPlatform()
	// Need the following to show the output when running from the console
	testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
	}
	testLogging.showStandardStreams = false
	finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
	afterEvaluate {
		if (excludeFromJacocoTestReport) {
			classDirectories.setFrom(files(classDirectories.files.collect {
				fileTree(dir: it,
						exclude: jacocoExclusions
				)
			}))
		}
	}

	// https://stackoverflow.com/questions/19025138/gradle-how-to-generate-coverage-report-for-integration-test-using-jacoco
	executionData {
		tasks.withType(Test).findAll {
			it.jacoco.destinationFile.exists()
		}*.jacoco.destinationFile
	}

	reports {
		xml.required = true
		// HTML report: build/reports/jacoco/test/html/index.html
		html.required = true
	}
}

jacocoTestCoverageVerification {
	dependsOn testInt

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: jacocoExclusions
			)
		}))
	}

	executionData {
		tasks.withType(Test).findAll {
			it.jacoco.destinationFile.exists()
		}*.jacoco.destinationFile
	}

	violationRules {
		rule {
			element = 'CLASS'
			excludes = jacocoExclusions
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.95
			}
		}
	}
}

cucumberReports {
    buildId = '0'
    outputDir = file("${buildDir}/reports/cucumber")
    reports = files("${buildDir}/reports/cucumber/cucumber-report.json")
}

check.configure {
	// check task depends on testInt and jacocoTestCoverageVerification
	// when you run ./gradlew check testInt and jacocoTestCoverageVerification tasks are also run
	dependsOn testInt
	dependsOn jacocoTestCoverageVerification
}
