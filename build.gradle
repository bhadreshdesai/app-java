plugins {
	id 'org.springframework.boot' version '2.4.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.22"
	id 'idea'
}

group = 'bdd.demo.'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

def versions = [
		openapi: '1.5.4',
		cucumber: '6.9.1'
]

sourceSets {
	testInt {
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

idea {
	module {
		testSourceDirs += project.sourceSets.testInt.java.srcDirs
		testSourceDirs += project.sourceSets.testInt.resources.srcDirs
	}
}

configurations {
	compileOnly.extendsFrom annotationProcessor
	testIntImplementation.extendsFrom implementation
	testIntRuntimeOnly.extendsFrom runtimeOnly
}

repositories {
	mavenCentral()
}

dependencies {
	annotationProcessor 'org.projectlombok:lombok'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	runtimeOnly 'com.h2database:h2'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testIntImplementation 'org.springframework.boot:spring-boot-starter-test'
	testIntImplementation "io.cucumber:cucumber-java:${versions.cucumber}"
	testIntImplementation "io.cucumber:cucumber-junit-platform-engine:${versions.cucumber}"
}

task testInt(type: Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	outputs.upToDateWhen { false }
	testClassesDirs = sourceSets.testInt.output.classesDirs
	classpath = sourceSets.testInt.runtimeClasspath
	shouldRunAfter test
}

tasks.withType(Test) {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
	//testLogging.showStandardStreams = true
	finalizedBy jacocoTestReport // report is always generated after tests run
}



jacocoTestReport {
	// https://stackoverflow.com/questions/19025138/gradle-how-to-generate-coverage-report-for-integration-test-using-jacoco
	executionData {
		tasks.withType(Test).findAll {
			it.jacoco.destinationFile.exists()
		}*.jacoco.destinationFile
	}

	reports {
		xml.enabled = true
		// HTML report: build/reports/jacoco/test/html/index.html
		html.enabled = true
	}
}

jacocoTestCoverageVerification {
	dependsOn testInt
	executionData {
		tasks.withType(Test).findAll {
			it.jacoco.destinationFile.exists()
		}*.jacoco.destinationFile
	}
	violationRules {
		rule {
			element = 'CLASS'
			excludes = [
					'bdd.demo.appjava.DemoApplication'
			]
			limit {
				counter = 'INSTRUCTION'
				value = 'COVEREDRATIO'
				minimum = 0.95
			}
		}
	}
}

cucumberReports {
    buildId = '0'
    outputDir = file("${buildDir}/reports/cucumber")
    reports = files("${buildDir}/reports/cucumber/cucumber-report.json")
}

check.dependsOn testInt, jacocoTestCoverageVerification
